{"version":3,"sources":["logo.svg","rudisill_resume_2019_public.pdf","MainNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Example","props","useState","isOpen","setIsOpen","Navbar","color","className","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","resume","target","NavbarText","App","MainNav","src","logo","alt","Button","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yD,kUCgE5BC,EA9CC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,UAAU,cAAcC,OAAK,EAACC,OAAO,MACxD,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,oBACA,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMT,GAAWD,MAO1B,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKT,UAAU,UAAUQ,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,gBAAd,UAEF,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,gCAAd,WAEF,kBAACQ,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,YAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,qBAGA,kBAACA,EAAA,EAAD,uBAGA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,8BAKJ,kBAACT,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAMiB,IAAQC,OAAO,UAA9B,kBAGJ,kBAACC,EAAA,EAAD,CAAYvB,UAAU,cAAtB,iBCvBKwB,MA3Bf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAACyB,EAAD,MACA,4BAAQzB,UAAU,cAChB,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SACzC,kPAGA,2BAEE,uBAAGxB,KAAK,+CAAR,mEAEF,kBAACyB,EAAA,EAAD,CAAQ7B,UAAU,WAChBI,KAAK,sBACLkB,OAAO,SACPQ,IAAI,uBAHN,mBCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bd3a8878.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/rudisill_resume_2019_public.f9d963f6.pdf\";","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\nimport resume from './rudisill_resume_2019_public.pdf';\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"dark\" className='navbar-dark' light expand=\"md\">\n        <NavbarBrand href=\"/\">Garrett Rudisill</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/components/\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/alm0st907\">GitHub</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Projects\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  SMS Notifier\n                </DropdownItem>\n                <DropdownItem>\n                  Minor Projects\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  A dangling divider!\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            <NavItem>\n              <NavLink href={resume} target=\"_blank\">Résumé</NavLink>\n            </NavItem>\n          </Nav>\n          <NavbarText className=\"text-white\">Portfolio</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Example;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'reactstrap';\nimport MainNav from './MainNav'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainNav></MainNav>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Portfolios are the bread and butter of software engineering, so here I am making one. It's also a good exercise in web development for someone who greatly prefers backend development. Enjoy this wild React ride.\n        </p>\n        <p>\n          {/* Edit <code>src/App.js</code> and save to reload. */}\n          <a href=\"https://www.youtube.com/watch?v=oHg5SJYRHA0\">Don't take life too seriously. It will hamper your creativity.</a>\n        </p>\n        <Button className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">Learn React!\n        </Button>\n\n        {/* <a>\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}